Slip-19
Java

1)-
import java.util.Scanner;

public class FibonacciSeries {
    
    // Function to display the Fibonacci series
    public static void printFibonacci(int n) {
        int a = 0, b = 1;
        for (int i = 1; i <= n; i++) {
            System.out.print(a + " ");
            int next = a + b;
            a = b;
            b = next;
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter the number of terms: ");
        int terms = scanner.nextInt();
        
        // Print the Fibonacci series
        printFibonacci(terms);

        scanner.close();
    }
}



Python

1)-

import tkinter as tk

def display_table():
    try:
        number = int(entry.get())
        table = [f"{number} x {i} = {number * i}" for i in range(1, 11)]
        text_area.delete(1.0, tk.END)
        text_area.insert(tk.END, "\n".join(table))
    except ValueError:
        text_area.delete(1.0, tk.END)
        text_area.insert(tk.END, "Invalid input. Please enter a number.")

# Create the main window
root = tk.Tk()
root.title("Multiplication Table")

# Entry for user input
entry = tk.Entry(root)
entry.pack(pady=10)

# Button to generate the table
button = tk.Button(root, text="Show Table", command=display_table)
button.pack(pady=5)

# Text area to display the table
text_area = tk.Text(root, height=10, width=30)
text_area.pack(pady=10)

2)-

import math

class Shape:
    def area(self):
        raise NotImplementedError("Subclasses must implement this method")

    def volume(self):
        raise NotImplementedError("Subclasses do not have volume")

class Square(Shape):
    def __init__(self, length):
        self.length = length

    def area(self):
        return self.length ** 2

    def volume(self):
        # Volume is not applicable for a square
        return 0

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * (self.radius ** 2)

    def volume(self):
        # Volume is not applicable for a circle
        return 0

# Example usage:
if __name__ == "__main__":
    # Create a square and calculate its area and volume
    square = Square(4)
    print("Square Area:", square.area())  # Output: 16
    print("Square Volume:", square.volume())  # Output: 0

    # Create a circle and calculate its area and volume
    circle = Circle(3)
    print("Circle Area:", circle.area())  # Output: ~28.27
    print("Circle Volume:", circle.volume())  # Output: 0





# Start the application
root.mainloop()
