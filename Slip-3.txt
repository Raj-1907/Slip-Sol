SLip-3

Java
1)-
import java.util.Scanner;

public class ArmstrongChecker {

    // Static method to check if a number is an Armstrong number
    public static boolean isArmstrong(int number) {
        int originalNumber = number;
        int sum = 0;
        int digits = String.valueOf(number).length(); // Count the number of digits

        // Calculate the sum of the digits raised to the power of the number of digits
        while (number > 0) {
            int digit = number % 10; // Extract the last digit
            sum += Math.pow(digit, digits); // Raise it to the power
            number /= 10; // Remove the last digit
        }

        return sum == originalNumber; // Return true if sum equals original number
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number: ");
        int number = scanner.nextInt(); // Accept user input

        // Check if the number is an Armstrong number and print the result
        System.out.println(number + (isArmstrong(number) ? " is an Armstrong number." : " is not an Armstrong number."));
        
        scanner.close(); // Close the scanner
    }
}


Python

1)-
# Function to check if a key exists and replace it
def replace_key_value(dictionary, old_key, new_key, new_value):
    if old_key in dictionary:
        print(f"Key '{old_key}' exists. Replacing with new key-value pair.")
        # Remove the old key and add the new key-value pair
        dictionary.pop(old_key)
        dictionary[new_key] = new_value
    else:
        print(f"Key '{old_key}' does not exist in the dictionary.")
    
    return dictionary

# Example dictionary
my_dict = {
    "name": "Alice",
    "age": 25,
    "city": "New York"
}

# Example usage
old_key = "age"
new_key = "birth_year"
new_value = 1998

# Call the function and print the updated dictionary
updated_dict = replace_key_value(my_dict, old_key, new_key, new_value)
print("Updated Dictionary:", updated_dict)

2)-
# Define the Student class
class Student:
    def __init__(self, roll_no, name, age, gender):
        self.roll_no = roll_no
        self.name = name
        self.age = age
        self.gender = gender

    def display_student_details(self):
        print(f"Roll No: {self.roll_no}")
        print(f"Name: {self.name}")
        print(f"Age: {self.age}")
        print(f"Gender: {self.gender}")

# Define the Test class, inheriting from Student
class Test(Student):
    def __init__(self, roll_no, name, age, gender, marks1, marks2, marks3):
        super().__init__(roll_no, name, age, gender)  # Initialize Student attributes
        self.marks1 = marks1
        self.marks2 = marks2
        self.marks3 = marks3

    def calculate_total_marks(self):
        return self.marks1 + self.marks2 + self.marks3

    def display_details(self):
        self.display_student_details()
        print(f"Marks: {self.marks1}, {self.marks2}, {self.marks3}")
        print(f"Total Marks: {self.calculate_total_marks()}")
        print("-----------------------------")


# Create three objects of the Test class
student1 = Test(101, "Alice", 20, "Female", 85, 90, 88)
student2 = Test(102, "Bob", 21, "Male", 78, 82, 80)
student3 = Test(103, "Charlie", 19, "Male", 92, 87, 91)

# Display details of each student
student1.display_details()
student2.display_details()
student3.display_details()
