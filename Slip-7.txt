Slip-7

Java
1)-
import java.awt.*;  
import javax.swing.*;  

public class LabelExample {

    public static void main(String[] args) {
        // Create a new frame
        JFrame frame = new JFrame("College Label");  
        frame.setSize(400, 200);  // Set frame size
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  // Close the application on exit
        
        // Create a new label with the specified text
        JLabel label = new JLabel("Dr. D Y Patil College", SwingConstants.CENTER);
        
        // Set the font size to 20
        label.setFont(new Font("Arial", Font.PLAIN, 20));

        // Set the background color of the label to red
        label.setBackground(Color.RED);
        label.setOpaque(true); // Make the label opaque to show the background color

        // Add the label to the frame
        frame.add(label);  

        // Make the frame visible
        frame.setVisible(true);  

        // Center the frame on the screen
        frame.setLocationRelativeTo(null);
    }
}



python

1)-
class ComplexNumber:
    def __init__(self, real, imag):
        self.real = real  # Real part
        self.imag = imag  # Imaginary part

    # Overloading the + operator
    def __add__(self, other):
        # Add real parts and imaginary parts separately
        return ComplexNumber(self.real + other.real, self.imag + other.imag)

    # Method to represent the complex number in a+bi format
    def __str__(self):
        return f"{self.real} + {self.imag}i"

# Example usage
if __name__ == "__main__":
    # Creating two complex numbers
    c1 = ComplexNumber(2, 3)  # 2 + 3i
    c2 = ComplexNumber(4, 5)  # 4 + 5i

    # Adding two complex numbers using the overloaded + operator
    result = c1 + c2

    # Displaying the result
    print(f"The sum of {c1} and {c2} is {result}")

2)-

import tkinter as tk
import random
import string

# Function to generate a random password
def generate_password():
    length = int(length_entry.get())
    characters = string.ascii_letters + string.digits  # Upper and lower case letters + digits
    password = ''.join(random.choice(characters) for _ in range(length))
    password_label.config(text=password)

# Create the main window
root = tk.Tk()
root.title("Password Generator")

# Input for password length
length_entry = tk.Entry(root)
length_entry.pack(pady=10)

# Button to generate the password
generate_button = tk.Button(root, text="Generate Password", command=generate_password)
generate_button.pack(pady=10)

# Label to display the password
password_label = tk.Label(root, text="", font=('calibri', 14))
password_label.pack(pady=10)

# Run the application
root.mainloop()
